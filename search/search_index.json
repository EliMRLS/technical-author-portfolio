{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Elisa (E) Morales Cinta \u2014 Technical Author Portfolio","text":"<p>Welcome \u2014 this repo contains short documentation samples organized by the Di\u00e1taxis framework:</p> <ul> <li>Tutorials \u2014 step-by-step learning</li> <li>How-to \u2014 solve a specific problem</li> <li>Reference \u2014 authoritative specification/template</li> <li>Explanations \u2014 why/how things work</li> </ul> <p>Use the navigation menu to open each example.</p>"},{"location":"explanations/diataxis/","title":"Understanding the Di\u00e1taxis Documentation Framework","text":"<p>Modern software documentation often fails not because it lacks detail, but because it lacks structure. The Di\u00e1taxis framework provides a powerful way to organize technical documentation according to the needs and intentions of the reader.</p> <p>This page explains the core ideas behind Di\u00e1taxis and why it helps create better, more usable documentation.</p>"},{"location":"explanations/diataxis/#what-is-diataxis","title":"What Is Di\u00e1taxis?","text":"<p>Di\u00e1taxis is a documentation framework that divides content into four distinct types:</p> <ol> <li>Tutorials \u2013 learning-oriented  </li> <li>How-to Guides \u2013 goal-oriented  </li> <li>Reference \u2013 information-oriented  </li> <li>Explanation \u2013 understanding-oriented</li> </ol> <p>Each type serves a different user need. Mixing them leads to confusion and poor user experience.</p>"},{"location":"explanations/diataxis/#the-four-types-explained","title":"The Four Types Explained","text":""},{"location":"explanations/diataxis/#1-tutorials-learning-by-doing","title":"1. Tutorials \u2014 Learning by doing","text":"<p>Tutorials guide users through a sequence of steps to help them learn something new. They are aimed at beginners and focus on building confidence and mental models.</p> <p>Example: \u201cGetting Started with MkDocs\u201d</p>"},{"location":"explanations/diataxis/#2-how-to-guides-solving-a-specific-problem","title":"2. How-to Guides \u2014 Solving a specific problem","text":"<p>How-to guides are recipes. They are focused, procedural documents that show how to accomplish a specific goal. They assume some prior knowledge.</p> <p>Example: \u201cHow to Write a Functional Specification\u201d</p>"},{"location":"explanations/diataxis/#3-reference-consulting-definitive-information","title":"3. Reference \u2014 Consulting definitive information","text":"<p>Reference documentation is technical and factual. It provides details that can be looked up, such as configuration options, API specs, or templates. It is not meant to be read top-to-bottom.</p> <p>Example: \u201cFunctional Specification Template\u201d</p>"},{"location":"explanations/diataxis/#4-explanation-understanding-the-concept","title":"4. Explanation \u2014 Understanding the concept","text":"<p>Explanation content provides background, theory, and context. It answers the why behind the software, the feature, or the decision. It helps users understand the system at a deeper level.</p> <p>This current page is itself an example of an Explanation.</p>"},{"location":"explanations/diataxis/#why-diataxis-matters","title":"Why Di\u00e1taxis Matters","text":"<p>Most documentation mixes styles without realizing it. A page that starts as a how-to guide might drift into explanation or reference, confusing the reader.</p> <p>By separating documentation types, Di\u00e1taxis helps:</p> <ul> <li>Match content to user needs</li> <li>Improve discoverability</li> <li>Support learning and problem-solving</li> <li>Clarify the voice and purpose of each document</li> </ul>"},{"location":"explanations/diataxis/#applying-diataxis-in-practice","title":"Applying Di\u00e1taxis in Practice","text":"<p>To apply the Di\u00e1taxis model, ask:</p> <ul> <li>Is the reader trying to learn, do, look up, or understand?</li> <li>Does the document stick to one of these goals?</li> <li>Are the four types clearly separated and discoverable?</li> </ul> <p>The result is a more intentional and usable documentation system that respects the user's context.</p>"},{"location":"explanations/diataxis/#further-reading","title":"Further Reading","text":"<ul> <li>diataxis.fr</li> </ul>"},{"location":"howto/write-functional-spec/","title":"How to Write a Functional Specification","text":"<p>This guide walks you through the steps to create a clear and useful functional specification for a software feature. Functional specs help align developers, designers, and stakeholders by describing exactly how a feature should work.</p>"},{"location":"howto/write-functional-spec/#prerequisites","title":"Prerequisites","text":"<ul> <li>A defined feature or problem to solve</li> <li>Access to product or technical documentation (if any)</li> <li>Collaboration with developers and/or designers</li> </ul>"},{"location":"howto/write-functional-spec/#steps","title":"Steps","text":"<ol> <li> <p>Define the Objective</p> <p>Start by writing a short description of what the feature is and what problem it solves.</p> <p><code>text Example: Allow users to reset their password via email if they forget their login credentials.</code></p> </li> <li> <p>Describe the User Story</p> <p>Include the primary user story and any relevant secondary stories using the standard format:</p> <p><code>text As a [type of user], I want to [perform some action] so that [achieve some goal].</code></p> <p><code>text Example: As a registered user, I want to reset my password via email so that I can regain access to my account without contacting support.</code></p> </li> <li> <p>List Requirements</p> <p>Break down the feature into functional requirements. These are specific, testable statements of what the system must do.</p> <p><code>text - The login page must include a \"Forgot Password?\" link. - The link opens a form requesting the user\u2019s email. - The system sends a reset email with a unique link. - The link is valid for 30 minutes and can only be used once.</code></p> </li> <li> <p>Specify Edge Cases and Constraints</p> <p>Think through and document edge cases or limitations.</p> <p><code>text - If the email is not associated with an account, show a generic success message. - If the token is expired, display a message and allow the user to request a new one.</code></p> </li> <li> <p>Add Wireframes or UI References</p> <p>If available, include wireframes, UI mocks, or even links to design systems.</p> <p><code>text [Include screenshot or design link here]</code></p> </li> <li> <p>Define Acceptance Criteria</p> <p>Clearly state how the team will know the feature is complete and working as intended.</p> <p><code>text - Clicking \u201cForgot Password?\u201d opens the reset form. - Submitting a valid email sends a reset link. - The reset link brings the user to a new password form. - The system rejects expired or reused links.</code></p> </li> <li> <p>Review with Stakeholders</p> <p>Share the draft with developers, designers, and product stakeholders for feedback before development starts.</p> </li> </ol>"},{"location":"howto/write-functional-spec/#tips","title":"Tips","text":"<ul> <li>Use plain language. Avoid ambiguity.</li> <li>Be concise, but cover edge cases.</li> <li>Include only what\u2019s necessary for implementation and testing.</li> <li>Avoid mixing design or implementation decisions unless required.</li> </ul>"},{"location":"howto/write-functional-spec/#next-steps","title":"Next Steps","text":"<p>Once approved, save the specification in your team\u2019s documentation system (e.g. Git repo, Notion, Confluence) and link to it from the relevant Jira or task-tracking item.</p>"},{"location":"reference/functional-spec-template/","title":"Functional Specification Template","text":"<p>Use this template as a reference when writing functional specifications for software features. It provides a standardized structure that helps ensure clarity and completeness.</p>"},{"location":"reference/functional-spec-template/#title","title":"Title","text":"<p>Provide a short, descriptive title for the feature or component.</p> <p>Example: Password Reset via Email</p>"},{"location":"reference/functional-spec-template/#overview","title":"Overview","text":"<p>Summarize the purpose and scope of the feature in 2\u20133 sentences.</p> <p>This feature allows users to reset their password using a secure email link. It applies to all registered users who have forgotten their login credentials.</p>"},{"location":"reference/functional-spec-template/#user-story","title":"User Story","text":"<p>Use the following format to describe the main user goal.</p> <p>As a [user type], I want to [do something] so that [desired outcome].</p>"},{"location":"reference/functional-spec-template/#functional-requirements","title":"Functional Requirements","text":"<p>List the key behaviors the feature must support. These should be clear, specific, and testable.</p> <ul> <li>Display a \u201cForgot Password?\u201d link on the login screen.</li> <li>Prompt the user to enter their email address.</li> <li>Send a password</li> </ul>"},{"location":"tutorials/getting-started/","title":"Getting Started with MkDocs and Material Theme","text":"<p>This tutorial will walk you through setting up a documentation site using MkDocs and the Material for MkDocs theme. It is aimed at beginners who want to create a professional-looking static site for documentation using Markdown.</p>"},{"location":"tutorials/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.7 or higher installed</li> <li>Git installed</li> <li>Basic familiarity with the command line</li> </ul>"},{"location":"tutorials/getting-started/#steps","title":"Steps","text":"<ol> <li> <p>Create a project directory</p> <p><code>bash mkdir my-docs-site cd my-docs-site</code></p> </li> <li> <p>Create and activate a virtual environment</p> <p><code>bash python3 -m venv .venv source .venv/bin/activate</code></p> </li> <li> <p>Install MkDocs and the Material theme</p> <p><code>bash pip install mkdocs mkdocs-material</code></p> </li> <li> <p>Scaffold a new MkDocs site</p> <p><code>bash mkdocs new .</code></p> </li> <li> <p>Create additional folders for documentation content</p> <p><code>bash mkdir -p docs/tutorials docs/howto docs/reference docs/explanations</code></p> </li> <li> <p>Create Markdown files for each documentation section</p> <p><code>bash touch docs/tutorials/getting-started.md touch docs/howto/write-functional-spec.md touch docs/reference/functional-spec-template.md touch docs/explanations/diataxis.md</code></p> </li> <li> <p>Edit the MkDocs configuration file</p> <p>Open the mkdocs.yml file and make sure it includes the following structure:</p> <p><code>yaml site_name: \"Elisa (E) Morales Cinta \u2014 Technical Author Portfolio\" site_description: \"Di\u00e1taxis-style documentation samples (tutorial, how-to, reference, explanation)\" repo_name: \"elimrls/technical-author-portfolio\" nav:     - Home: index.md     - Di\u00e1taxis:         - Tutorials: tutorials/getting-started.md         - How-to: howto/write-functional-spec.md         - Reference: reference/functional-spec-template.md         - Explanations: explanations/diataxis.md theme:     name: material extra_css:     -styles/fix-list-code.css</code></p> </li> <li> <p>Preview the site locally</p> <p>Run the following command:</p> <p><code>bash mkdocs serve</code></p> <p>Then open your browser and visit:</p> <p><code>http://127.0.0.1:8000</code></p> </li> </ol>"},{"location":"tutorials/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that your MkDocs site is running, you can begin writing and organizing your documentation using the Di\u00e1taxis framework: tutorials, how-to guides, reference material, and explanations.</p>"}]}